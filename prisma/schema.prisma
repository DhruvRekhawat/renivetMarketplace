// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Set this environment variable with your database URL
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  password    String
  role        String
  name        String?
  address     String?
  phoneNumber String?
  orders      Order[]  @relation("UserOrders")
  reviews     Review[]
  cart        Cart? 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int
  sku         String      @unique
  categoryId  Int
  category    Category    @relation(fields: [categoryId], references: [id])
  brandId     Int
  brand       Brand       @relation(fields: [brandId], references: [id])
  reviews     Review[]
  orderItems  OrderItem[]
  images      Image[]
  cartItems   CartItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Brand {
  id                             Int        @id @default(autoincrement())
  brandName                      String
  contactName                    String
  email                          String     @unique
  password                       String
  phoneNumber                    String
  websiteUrl                     String? // Optional
  products                       Product[]
  businessType                   BusinessType
  businessRegistrationNumber     String
  countryOfRegistration          String
  gstNumber                      String
  productDescription             String
  categories                     String[]
  priceRanges                    String[]
  materials                      String
  sustainabilityCertifications   String[]
  animalTesting                  Boolean
  unSdgs                         String[]
  brandStory                     String
  socialMedia                    String
  socialMediaId                  Int?
  totalProductionPerYear         Float
  numberOfSuppliers              Int
  supplyChainDescription         String
  manufacturingProcesses         String
  electricityConsumption         Float
  waterConsumption               Float
  wastePercentage                Float
  recycledPercentage             Float
  packagingMaterials             String
  brandLogo                      String?
  certifications                 String?
  productCatalog                 String?
  createdAt                      DateTime   @default(now())
  updatedAt                      DateTime   @updatedAt

}






model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  user        User        @relation(fields: [userId], references: [id], name: "UserOrders")
  orderItems  OrderItem[]
  status      OrderStatus
  totalAmount Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  unitPrice Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int      @default(0)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  COMPLETED
  SHIPPED
  CANCELLED
}

enum BusinessType {
  Sole_Proprietorship
  Partnership
  Corporation
  LLC
  Other
}
