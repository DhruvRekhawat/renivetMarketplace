// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Set this environment variable with your database URL
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  password    String
  role        String
  name        String?
  address     String?
  phoneNumber String?
  orders      Order[]  @relation("UserOrders")
  reviews     Review[]
  cart        Cart? 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int
  sku         String      @unique
  categoryId  Int
  category    Category    @relation(fields: [categoryId], references: [id])
  brandId     Int
  brand       Brand       @relation(fields: [brandId], references: [id])
  reviews     Review[]
  orderItems  OrderItem[]
  images      Image[]
  cartItems   CartItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Brand {
  id                             Int        @id @default(autoincrement())
  brandName                      String
  contactName                    String
  email                          String     @unique
  password                       String
  phoneNumber                    String
  websiteUrl                     String? 
  products                       Product[]
  businessType                   BusinessType
  businessRegistrationNumber     String
  countryOfRegistration          String
  gstNumber                      String?
  productDescription             String
  categories                     String[]
  materials                      String
  sustainabilityCertifications   String[]
  unSdgs                         String[]
  brandStory                     String?
  socialMedia_facebook           String?
  socialMedia_instagram          String?
  socialMedia_twitter            String?
  totalProductionPerYear         Float?
  numberOfSuppliers              Int?
  supplyChainDescription         String?
  manufacturingProcesses         String?
  electricityConsumption         Float?
  waterConsumption               Float?
  wastePercentage                Float?
  recycledPercentage             Float?
  packagingMaterials             String?
  brandLogo                      String?
  certifications                 String?
  productCatalog                 String?
  createdAt                      DateTime   @default(now())
  updatedAt                      DateTime   @updatedAt
  status                         Status
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  user        User        @relation(fields: [userId], references: [id], name: "UserOrders")
  orderItems  OrderItem[]
  status      OrderStatus
  totalAmount Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  unitPrice Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int      @default(0)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  COMPLETED
  SHIPPED
  CANCELLED
}

enum BusinessType {
  Sole_Proprietorship
  Partnership
  Corporation
  LLC
  Other
}

enum Status{
  DRAFT
  PENDING
  APPROVED
  REMOVED
}


model SurveyResponse {
  id                            Int      @id @default(autoincrement())
  name                          String
  mobile                        String   
  email                         String   
  dob                           String
  gender                        String
  occupation                    String
  annualIncome                  String
  clothingStyle                 String
  purchaseFactors               String[] // Store as a list of strings
  typicalBudget                 String
  purchaseFrequency             String
  onlineShoppingFeatures       String[] // Store as a list of strings
  certificationImportance       String
  sustainablePremium            String
  sustainabilityBarriers         String[] // Store as a list of strings
  otherSustainabilityBarrier     String?
  sustainabilityEncouragements  String[] // Store as a list of strings
  otherSustainabilityEncouragement String?
  
  @@map("survey_responses") // Optional: if you want to map to a specific table name
}
